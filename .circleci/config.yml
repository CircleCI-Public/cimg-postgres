version: 2.1

orbs:
  cimg: circleci/cimg@0.3.0

workflows:
  main-wf:
    jobs:
      - cimg/build-and-deploy:
          name: "Staging"
          docker-namespace: ccitest
          docker-repository: postgres
          publish-branch: test
          filters:
            branches:
              ignore:
                - main
          context: cimg-publishing
          post-steps:
            - run:
                mkdir -p /tmp/builds
                eval docker images --format='{{.Repository}}:{{.Tag}}' | grep "ccitest/postgres" > /tmp/builds/built-images
            - persist_to_workspace:
                root: /tmp/builds
                paths:
                  - built-images
      - test:
          name: "Test Postgres"
          filters:
            branches:
              ignore:
                - main
          requires:
            - "Staging"
          context: cimg-publishing
      - cimg/build-and-deploy:
          name: "Deploy"
          docker-repository: postgres
          filters:
            branches:
              only:
                - main
          context: cimg-publishing

jobs:
  test:
    docker:
      - image: cimg/base:2023.01
    steps:
      - attach_workspace:
          at: /tmp/builds
      - checkout
      - setup_remote_docker:
          version: "20.10.18"
      - run:
          name: "Log in to Docker"
          command: |
            echo 'export DOCKER_PASS=$DOCKER_TOKEN' >> $BASH_ENV
      - run:
          name: "Install Test Prerequisites"
          command: |
            sudo apt-get update && \
            sudo apt-get install -y postgresql-client
      - run:
          name: "Test Docker Images"
          shell: /bin/bash -o pipefail
          command: |
            ssh -f -N -L localhost:5432:localhost:5432 remote-docker
            for IMAGE in $(cat /tmp//builds/built-images); do
              printf "Booting $IMAGE...\n"
              CONTAINER_ID=$(docker run --rm --env POSTGRES_USER=user --env POSTGRES_PASSWORD=passw0rd -p 5432:5432 -d $IMAGE)
              for i in {1..20}; do
                printf "[$i/20] Checking Postgres is up...\n"
                pg_isready -h 127.0.0.1 -q
                if [ $? -eq 0 ]; then
                  printf "Booted $IMAGE!\n"
                  break
                elif [ $? -ne 0 ] && [ $i -eq 20 ]; then
                  printf "Failed to boot image\n"
                  exit 1
                fi
                printf "[$i/20] No response. Sleeping 10s...\n"
                sleep 10s
              done
              printf "Running Test Command...\n"
              printf "Running Version Check...\n"
              VERSION=$(echo $IMAGE | cut -d ":" -f2 | cut -d "-" -f1)
              if PGPASSWORD=passw0rd psql -h 127.0.0.1 -U user postgres -c "SELECT VERSION();" | grep $VERSION ; then
                printf "Version matches!\n"
              else
                printf "Version mismatch!\n"
                exit 1
              fi
              printf "Stopping $IMAGE...\n"
              docker stop $CONTAINER_ID >/dev/null 2>&1
            done
            printf "All images passed!\n"
