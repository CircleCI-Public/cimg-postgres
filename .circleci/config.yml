version: 2.1

workflows:
  main:
    jobs:
      - build:
          context: cimg-publishing

jobs:
  build:
    docker:
      - image: cibuilds/docker:19.03
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build Docker Images"
          command: |
            ./build-images.sh
            docker images
            echo 'export DOCKER_PASS=$DOCKER_TOKEN' >> $BASH_ENV
      - run:
          name: "Install Test Prerequisites"
          command: |
            apk add postgresql-client
      - run: 
          name: "Test Docker Images"
          shell: /bin/bash -o pipefail
          command: |
            ssh -f -N -L localhost:5432:localhost:5432 remote-docker
            IMAGES=$(docker images --format='{{.Repository}}:{{.Tag}}' | grep "cimg/postgres")
            for IMAGE in $IMAGES; do
              printf "Booting $IMAGE...\n"
              CONTAINER_ID=$(docker run --rm --env POSTGRES_USER=user --env POSTGRES_PASSWORD=passw0rd -p 5432:5432 -d $IMAGE)
              for i in {1..20}; do
                printf "[$i/20] Checking Postgres is up...\n"
                pg_isready -h 127.0.0.1 -q
                if [ $? -eq 0 ]; then
                  printf "Booted $IMAGE!\n"
                  break
                elif [ $? -ne 0 ] && [ $i -eq 20 ]; then
                  printf "Failed to boot image\n"
                  exit 1
                fi
                printf "[$i/20] No response. Sleeping 10s...\n"
                sleep 10s
              done
              printf "Running Test Command...\n"
              printf "Running Version Check...\n"
              VERSION=$(echo $IMAGE | cut -d ":" -f2 | cut -d "-" -f1)
              if PGPASSWORD=passw0rd psql -h 127.0.0.1 -U user postgres -c "SELECT VERSION();" | grep $VERSION ; then
                printf "Version matches!\n"
              else
                printf "Version mismatch!\n"
                exit 1
              fi
              printf "Stopping $IMAGE...\n"
              docker stop $CONTAINER_ID >/dev/null 2>&1
            done
            printf "All images passed!\n"
      - deploy:
          name: "Publish Docker Images (main branch only)"
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              
              echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
              
              # an else block will be added in the future for a staging release
              if git log -1 --pretty=%s | grep "\[release\]"; then
                echo "Publishing cimg/postgres to Docker Hub production."
                ./push-images.sh
              else
                echo "Skipping publishing."
              fi

              # Update the Docker Hub description
              STUBB_VER=0.2.0
              STUBB_URL="https://github.com/CircleCI-Public/stubb/releases/download/v${STUBB_VER}/stubb_${STUBB_VER}-linux-amd64.tar.gz"
              curl -sSL $STUBB_URL | tar -xz -C /usr/local/bin stubb

              stubb set description cimg/postgres ./README.md
            fi
