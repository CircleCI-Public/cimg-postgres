version: 2.1

orbs:
  cimg: circleci/cimg@0.3.4
  slack: circleci/slack@4.12.1
  gh: circleci/github-cli@2.2.0

parameters:
  cron:
    type: boolean
    default: false

workflows:
  automated-wf:
      when: << pipeline.parameters.cron >>
      jobs:
        - check-feed:
            context:
              - cimg-publishing
  main-wf:
    when:
      not: << pipeline.parameters.cron >>
    jobs:
      - cimg/build-and-deploy:
          name: "Staging"
          docker-namespace: ccitest
          docker-repository: postgres
          publish-branch: test
          filters:
            branches:
              ignore:
                - main
          post-steps:
            - run:
                name: Install Prerequisites
                command: |
                  sudo apt-get update && \
                  sudo apt-get install -y postgresql-client
            - run:
                name: Test Docker Images
                shell: /bin/bash -o pipefail
                command: |
                  ssh -f -N -L localhost:5432:localhost:5432 remote-docker
                  IMAGES=$(docker images --format='{{.Repository}}:{{.Tag}}' | grep "ccitest/postgres")
                  for IMAGE in $IMAGES; do
                    printf "Booting $IMAGE...\n"
                    CONTAINER_ID=$(docker run --rm --env POSTGRES_USER=user --env POSTGRES_PASSWORD=passw0rd -p 5432:5432 -d $IMAGE postgres -c 'config_file=/var/lib/postgresql/data/postgresql.conf')
                    for i in {1..20}; do
                      printf "[$i/20] Checking Postgres is up...\n"
                      pg_isready -h 127.0.0.1
                      if [ $? -eq 0 ]; then
                        printf "Booted $IMAGE!\n"
                        break
                      elif [ $? -ne 0 ] && [ $i -eq 20 ]; then
                        printf "Failed to boot image\n"
                        exit 1
                      fi
                      printf "[$i/20] No response. Sleeping 10s...\n"
                      sleep 10s
                    done
                    printf "Running Test Command...\n"
                    printf "Running Version Check...\n"
                    VERSION=$(echo $IMAGE | cut -d ":" -f2 | cut -d "-" -f1)
                    if PGPASSWORD=passw0rd psql -h 127.0.0.1 -U user postgres -c "SELECT VERSION();" | grep $VERSION ; then
                      printf "Version matches!\n"
                    else
                      printf "Version mismatch!\n"
                      exit 1
                    fi
                    printf "Stopping $IMAGE...\n"
                    docker stop $CONTAINER_ID >/dev/null 2>&1
                  done
                  printf "All images passed!\n"
            - slack/notify:
                branch_pattern: release-v.+
                event: pass
                mentions: "@jalexchen"
                template: basic_success_1
          context: cimg-publishing
      - cimg/build-and-deploy:
          name: "Deploy"
          docker-repository: postgres
          filters:
            branches:
              only:
                - main
          post-steps:
            - slack/notify:
                branch_pattern: main
                event: fail
                mentions: "@images"
                template: basic_fail_1
          context: cimg-publishing

jobs:
  check-feed:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f8:07:0f:f6:b5:eb:57:ae:be:4d:2f:2d:be:70:8f:ff"
      - run:
          name: SSH config to pull and push project
          command: |
            ssh-add -D
            ssh-add ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff
            ssh-keygen -f ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff -y > ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff.pub
            echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFHZoU4/njm1peseKCHfY4igdb4cbVwK16ADNlIoj6Ch secops+cpe-image-bot@circleci.com" > ~/.ssh/allowed_signers
      - run:
          name: Run git config
          command: |
            cat \<<'EOF' >> ~/githelper.sh
              #!/usr/bin/env bash
              echo username=$GIT_USERNAME
              echo password=$IMAGE_BOT_TOKEN
            EOF

            git config --global user.email "secops+cpe-image-bot@circleci.com"
            git config --global user.name "cpe-image-bot"
            git config --global user.signingkey "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFHZoU4/njm1peseKCHfY4igdb4cbVwK16ADNlIoj6Ch"
            git config --global gpg.ssh.allowedSignersFile ~/.ssh/allowed_signers
            git config --global url."https://github.com".insteadOf ssh://git@github.com
            git config --global url."https://github.com/".insteadOf git@github.com:
            git config --global credential.helper "/bin/bash ~/githelper.sh"
            git config --global gpg.format ssh
            git config --global commit.gpgsign true
            git submodule sync
      - gh/setup:
          token: IMAGE_BOT_TOKEN
      - run:
          name: Run version update script
          command: |
            sudo chmod +x postgresFeed.sh
            git submodule update --init --recursive
            ./postgresFeed.sh
